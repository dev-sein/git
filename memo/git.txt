JSP 팀프로젝트의 목적 : 
	완성하자
	욕심부리지 말자(최소한의 컨텐츠)

버전 관리 시스템
	원하는 시점(버전)으로 이동할 수 있으며, 
	각 버전별로 여러 개발자가 협업할 수 있는 최적의 환경을 제공하는 시스템

//EX) A -> CRUD 하는 순간 버전1, 작업하는 순간 버전2
기존에 있던 파일에 소스코드를 CRUD 했을 때 버전이 넘어감. 원본 수정하면 X
Ctrl+S 누를 때마다 버전이 나온다. 이러한 파일들을 보관 및 관리하는 것.

SVN(무조건 서버 필요)
	작업 내역 커밋 시 변경사항과 히스토리가 즉시 서버로 저농되기 때문에 관리가 용이하다.
	또한 간단한 설치와 사용 방법으로 별도의 교육 없이 초보자도 쉽게 사용할 수 있다.
	하지만 항상 원격 저장소(SVN 서버)를 필요로 하며, 서버 간 버전 관리가 힘들다.

Git(분산형 버전 관리 시스템) // 로컬(개인PC) 정리를 위해 나옴
	SVN이 가지고 있던 클라이언트와 서버 간의 버전 관리 문제를 많이 보완해준 시스템
	서버 뿐만 아니라 로컬에서도 버전 관리가 가능하며, 로컬이 서버가 될 수 있고,
	서버도 로컬이 될 수 있다. 브랜치라는 개념을 사용하여 마음대로 로컬 환경에서도
	커밋과 버전 관리가 가능하다. 

Git-Hub(분산형 버전 관리 공유 서버)
	Git으로 관리하는 프로젝트를 호스팅해주는 사이트 중 하나이다. 
	로컬 저장소에서 작업하던 파일을 다른 클라이언트와 공유하기 위한 서버이다. 
//Git의 서버. 협업하려고 만든 것. (다이렉트로 연결되는 svn과 달리 깃허브는 중간에 하나를 거침.)
//로컬에서 작업 -> 개인서버에 저장 -> 개인서버에서 문제가 없으면 메인으로 올림. 개인저장소는 메인저장소와 연결(참조)가 되어 있기 때문에 항상 연결 상태임. 
메인서버가 날아가도 개인서버에서 올리면 살아남. 각각의 로컬pc가 백업파일을 가지고 있음. SVN처럼 백업파일을 별도로 만들 필요 없음.
=========================================================

브랜치
	한 개의 처리 경로를 여러 개의 처리 경로로 나눌 때 사용한다.
	보통 동시에 버전 관리를 해야할 때 사용하며,
	기본 브랜치는 master(현재는 main)이고, 각각의 브랜치는 현재 버전에 대한 커밋을 가리키고 있다.
//가상 컴퓨터(로컬). 로컬, 개인서버에 각각 있음.  하나의 pc에서 마치 여러대 pc를 쓰는 것처럼 분배를 함. 브랜치에 따라 A 환경, B 작업 환경이 각각 적용됨.
브랜치끼리 병합(master) 가능. (master는 병합만 함. 작업하지 않음)

==========================================================
Organization 생성 > Repository 생성 > Settings > Collaborators and teams > Add people > 팀장 본인 계정 추가 > Role: Admin > 자격 관리 증명 삭제 > 터미널에서 push > 브라우저 로그인 선택  > fork 받기 > 개인 Repository 추가 > 작업 내용 개인 Repository에 push > Pull Request 작성 > pull > 변경사항 있을 시 다시 push

1. 팀장이 새로운 Organization 생성
2. Repository 생성
3. VSCode .gitignore 추가
4. Organization Repository에 push
5. 전체 인원 fork
6. 팀원 clone 
7. 팀장이 gitTest 폴더 추가
8. test.html 추가
9. 팀장 본인 이름 body에 작성
10. add, commit push, pr, merge
11. 전체 팀원 pull
12. 팀원 순서대로 위 차례로 진행
13. 전체 팀원 이름이 body에 작성될 경우 강사 호출
==========================================================

참고)
git remote remove project
git remote add project "주소"
git push project master

=====================
포크 받음 -> 개인 원격이 생김 -> 클론을 받음 (=로컬 생성) -> 공용원격 연결 - m,> syncfork 확인 ->  pull 받음 git pull 저장소이름 master ->  

======================================
fork -> 공용저장소를 참조하여 개인 레포지토리로 가져오게 됨 ->
===========================================================
메인(org)->개인(repo) 가져오는 작업: fork
메인(org)->개인(repo) 업데이트 반영: fetch
메인(ogr)->개인(local)  : pull

메인서버(organiazation, 공유서버)
개인서버(Repository)

메인서버에서 업데이트가 됨. 개인 레포지토리에서 반영 fetch(새로고침) 를 진행함. 

로컬 관리 명령어 add, commit(commit 하는 순간 새로운 버전을 만드는 것임), push -> re -> or 업로드 후 PR(pull request)을 보냄
->이후 팀장이 병합(merge)하면 메인 서버에 반영

개인: 푸쉬용 push
메인: 풀용 pull 

fork: 작업물 중간 저장소 개념 

<작업 순서>
A 로컬에서 작업(새로운 브랜치에서 해야함, master X) -> add, commit -> push (개인re) master branch ->  PR 보냄 -> 팀장 확인 -> 팀장 병합 -> 팀원 pull -> B 로컬에서 pull 받음.(master branch) 

ORG의 메인저장소 만들기(레포지토리) -> .gitignore 파일은 fork 하기 전에 올려야 함. 
->팀장 포함 전원 fork 받음 -> 팀원: fork 받은 후 clone 받아서 해야함(팀원은 git init 하면 안됨) -> workspace 로 공동작업.

-----------------------------------------------------------------------------------------------

자격 증명 관리자 -> git, 소스트리 삭제 -> 소스트리 다운로드 -> material 체크 x -> 깃허브로 인증 -> 
타계정 삭제 -> 계정 추가 (github 체크하여 로그인 인증 받기) -> 깃허브로 계정 세팅

---------------------------------------------
브랜치명: 경로로 생성해야함
git checkout -b board/list  //브랜치를 새로 만듦



-------------------------------------------------------------------------
